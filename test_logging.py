#!/usr/bin/env python3
"""
Script de test du syst√®me de logging.
V√©rifie que les logs sont correctement cr√©√©s et format√©s.
"""

import os
import sys
from pathlib import Path

def test_log_system():
    """Teste que le syst√®me de logging est correctement configur√©."""
    
    print("üß™ Test du Syst√®me de Logging")
    print("=" * 60)
    
    # Test 1: V√©rifier que le r√©pertoire logs existe
    print("\n1Ô∏è‚É£  V√©rification r√©pertoire logs/...")
    if Path("logs").exists():
        print("   ‚úÖ R√©pertoire logs/ existe")
    else:
        print("   ‚ùå R√©pertoire logs/ manquant - sera cr√©√© au d√©marrage")
    
    # Test 2: V√©rifier que app.py contient le syst√®me de logging
    print("\n2Ô∏è‚É£  V√©rification configuration dans app.py...")
    with open("app.py", "r", encoding="utf-8") as f:
        content = f.read()
        
        checks = [
            ("ContextFilter", "Filtre de contexte UID"),
            ("RotatingFileHandler", "Rotation des logs"),
            ("log_user_action", "Fonction de logging utilisateur"),
            ("log_data_operation", "Fonction de logging fichiers"),
            ("[USER_ACTION]", "Tags standardis√©s"),
            ("all_actions.log", "Fichier de logs principal"),
        ]
        
        for check, desc in checks:
            if check in content:
                print(f"   ‚úÖ {desc}")
            else:
                print(f"   ‚ùå {desc} - MANQUANT")
    
    # Test 3: V√©rifier que les outils existent
    print("\n3Ô∏è‚É£  V√©rification outils d'analyse...")
    tools = [
        ("tools/log_summary.py", "Script d'analyse"),
        ("docs/logging.md", "Documentation"),
        ("LOGGING_QUICKSTART.md", "Guide rapide"),
        ("docs/IMPLEMENTATION_SUMMARY.md", "R√©sum√© impl√©mentation"),
    ]
    
    for path, desc in tools:
        if Path(path).exists():
            print(f"   ‚úÖ {desc} ({path})")
        else:
            print(f"   ‚ùå {desc} ({path}) - MANQUANT")
    
    # Test 4: V√©rifier que log_summary.py est ex√©cutable
    print("\n4Ô∏è‚É£  V√©rification permissions...")
    if Path("tools/log_summary.py").exists():
        if os.access("tools/log_summary.py", os.X_OK):
            print("   ‚úÖ log_summary.py est ex√©cutable")
        else:
            print("   ‚ö†Ô∏è  log_summary.py n'est pas ex√©cutable")
            print("      Ex√©cuter: chmod +x tools/log_summary.py")
    
    # Test 5: Synth√®se
    print("\n" + "=" * 60)
    print("üìä SYNTH√àSE")
    print("=" * 60)
    print("""
Le syst√®me de logging est pr√™t √† l'emploi.

üöÄ Pour d√©marrer:
   python app.py

üìä Pour analyser:
   python tools/log_summary.py

üìö Documentation:
   - Guide rapide: LOGGING_QUICKSTART.md
   - Doc compl√®te: docs/logging.md
   - R√©sum√© modifs: docs/IMPLEMENTATION_SUMMARY.md

üí° Prochaine √©tape:
   D√©marrer l'application et v√©rifier que logs/ contient:
   - all_actions.log
   - errors.log
   - user_actions.log
""")

if __name__ == "__main__":
    test_log_system()
