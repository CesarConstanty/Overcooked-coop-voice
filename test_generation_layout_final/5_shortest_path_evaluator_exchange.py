#!/usr/bin/env python3
"""
S√©lecteur de Layouts Bas√© sur les √âchanges - Overcooked pour Sciences Cognitives

Ce module impl√©mente une m√©thodologie avanc√©e pour:
1. Analyser les √©changes entre joueurs dans chaque layout
2. Calculer l'efficacit√© de la coop√©ration par rapport au solo
3. S√©lectionner les layouts maximisant les interactions tout en optimisant l'efficacit√©
4. Visualiser les m√©triques d'√©change et de performance

Objectif: Identifier les layouts favorisant le plus d'interactions coop√©ratives 
         tout en maintenant un gain significatif d'efficacit√© par rapport au solo.

Auteur: Assistant IA Sp√©cialis√©
Date: Ao√ªt 2025
Contexte: Recherche en sciences cognitives sur la coop√©ration humain-IA
"""

import os
import json
import glob
import shutil
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from collections import defaultdict, Counter
from typing import Dict, List, Tuple, Optional
from pathlib import Path
from datetime import datetime
import statistics
from scipy import stats

# Configuration matplotlib pour des visualisations professionnelles
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")
plt.rcParams['figure.figsize'] = [12, 8]
plt.rcParams['font.size'] = 10

class ExchangeBasedLayoutSelector:
    """S√©lecteur de layouts bas√© sur l'analyse des √©changes entre joueurs"""
    
    def __init__(self):
        """Initialise le s√©lecteur avec configuration des dossiers et param√®tres"""
        # Configuration des dossiers
        self.data_dir = "path_evaluation_results"
        self.layouts_source_dir = "layouts_with_objects"
        self.selected_layouts_dir = "layout_analysis_results/exchange_analysis/layouts_√©changes_optimaux"
        self.output_dir = "layout_analysis_results/exchange_analysis"
        
        # Cr√©er les dossiers de sortie
        os.makedirs(self.output_dir, exist_ok=True)
        os.makedirs(self.selected_layouts_dir, exist_ok=True)
        
        # Param√®tres d'analyse des √©changes
        self.exchange_distance_threshold = 2.0  # Distance max pour consid√©rer un √©change
        self.min_exchange_duration = 2  # Dur√©e minimale d'un √©change (en steps)
        self.efficiency_threshold = 10  # Gain minimum requis en steps (solo - duo)
        self.min_exchange_count = 5  # Nombre minimum d'√©changes requis
        
        # Structure pour stocker les donn√©es
        self.layout_exchange_data = {}
        self.efficiency_data = {}
        self.combined_scores = {}
        self.total_processed_count = 0  # Compteur pour le traitement it√©ratif
        
        print(f"üîÑ S√©lecteur d'√©changes initialis√©")
        print(f"üìÇ Dossier de sortie: {self.output_dir}")
        print(f"üìÇ Layouts s√©lectionn√©s: {self.selected_layouts_dir}")
    
    def process_evaluation_files_iteratively(self) -> Dict[str, Dict]:
        """Traite les fichiers d'√©valuation de mani√®re it√©rative pour √©conomiser la m√©moire"""
        
        evaluation_files = glob.glob(f"{self.data_dir}/*.json")
        filtered_layouts = {}
        
        print(f"\nüìä Traitement it√©ratif de {len(evaluation_files)} fichiers...")
        print(f"üíæ Mode √©conome en m√©moire activ√©")
        
        total_processed = 0
        total_filtered = 0
        
        for i, file_path in enumerate(evaluation_files, 1):
            print(f"\nüìÅ Fichier {i}/{len(evaluation_files)}: {os.path.basename(file_path)}")
            
            try:
                # Traiter le fichier par chunks si possible
                file_layouts = self.load_single_file_data(file_path)
                
                if not file_layouts:
                    continue
                
                # Traiter chaque layout individuellement
                for layout_name, layout_info in file_layouts.items():
                    total_processed += 1
                    self.total_processed_count = total_processed  # Mettre √† jour le compteur global
                    
                    # Calculer les m√©triques d'√©change pour ce layout
                    exchange_data = self.simulate_player_exchanges(layout_info)
                    
                    # Appliquer les crit√®res de filtrage imm√©diatement
                    if self.meets_filtering_criteria(exchange_data):
                        filtered_layouts[layout_name] = exchange_data
                        total_filtered += 1
                        
                        if total_filtered % 10 == 0:
                            print(f"   ‚úÖ {total_filtered} layouts valid√©s jusqu'√† pr√©sent")
                
                # Lib√©rer la m√©moire du fichier trait√©
                del file_layouts
                
                print(f"   üìä Trait√©: {total_processed} | Valid√©: {total_filtered}")
                
            except Exception as e:
                print(f"   ‚ùå Erreur lors du traitement de {file_path}: {e}")
                continue
        
        print(f"\n‚úÖ Traitement termin√©:")
        print(f"   üìä Total analys√©: {total_processed} layouts")
        print(f"   üéØ Total valid√©: {total_filtered} layouts")
        if total_processed > 0:
            print(f"   üìà Taux de validation: {(total_filtered/total_processed*100):.1f}%")
        else:
            print(f"   üìà Aucun layout trouv√© dans {self.data_dir}")
        
        return filtered_layouts
    
    def load_single_file_data(self, file_path: str) -> Dict[str, Dict]:
        """Charge les donn√©es d'un seul fichier"""
        
        try:
            with open(file_path, 'r') as f:
                data = json.load(f)
            
            file_layouts = {}
            
            if isinstance(data, list):
                # Si c'est une liste de layouts
                for layout_info in data:
                    layout_path = layout_info.get('layout_path', '')
                    layout_name = self.extract_layout_name(layout_path)
                    if layout_name:
                        file_layouts[layout_name] = layout_info
            elif isinstance(data, dict):
                # Si c'est un dictionnaire
                for layout_name, layout_info in data.items():
                    file_layouts[layout_name] = layout_info
            
            return file_layouts
            
        except Exception as e:
            print(f"‚ùå Erreur lors du chargement de {file_path}: {e}")
            return {}
    
    def meets_filtering_criteria(self, exchange_data: Dict) -> bool:
        """V√©rifie si un layout respecte les crit√®res de filtrage bas√©s sur les √©changes r√©els"""
        
        # Crit√®re 1: Gain d'efficacit√© minimum
        if exchange_data['efficiency_gain'] < self.efficiency_threshold:
            return False
        
        # Crit√®re 2: Nombre d'√©changes minimum (plus strict pour les √©changes r√©els)
        min_exchanges_required = 3 if exchange_data.get('real_exchanges_detected', False) else self.min_exchange_count
        if exchange_data['exchange_count'] < min_exchanges_required:
            return False
        
        # Crit√®re 3: Am√©lioration significative (au moins 5% de gain)
        if exchange_data['efficiency_percentage'] < 5.0:
            return False
        
        # Crit√®re 4: Au moins une zone d'√©change
        if exchange_data['exchange_zones'] < 1:
            return False
        
        # Bonus pour les √©changes r√©els d√©tect√©s
        if exchange_data.get('real_exchanges_detected', False):
            return True  # Accepter plus facilement les layouts avec √©changes r√©els
        
        return True
    
    def extract_layout_name(self, layout_path: str) -> str:
        """Extrait le nom du layout depuis son chemin"""
        if not layout_path:
            return ""
        
        # Extraire le nom de fichier sans extension
        layout_name = os.path.basename(layout_path).replace('.layout', '')
        return layout_name
    
    def simulate_player_exchanges(self, layout_info: Dict) -> Dict:
        """
        Analyse les √©changes r√©els entre joueurs bas√©s sur les actions de jeu
        
        D√©tecte les s√©quences:
        1. Joueur A d√©pose un objet √† la position P (drop/place/deliver)
        2. Joueur B r√©cup√®re un objet √† la position P (pickup/grab/take)
        
        Returns:
            Dict contenant les m√©triques d'√©change r√©el d√©tect√©es
        """
        
        solo_distance = layout_info.get('solo_distance', 0)
        coop_distance = layout_info.get('coop_distance', 0)
        
        if solo_distance == 0 or coop_distance == 0:
            return self._create_empty_exchange_data()
        
        # R√©cup√©rer les actions des joueurs
        player_actions = layout_info.get('player_actions', {})
        coop_actions = layout_info.get('coop_actions', [])
        game_actions = layout_info.get('game_actions', [])
        
        # Essayer diff√©rents formats de donn√©es d'actions
        actions_to_analyze = coop_actions or game_actions or []
        
        # Si pas d'actions trouv√©es, utiliser l'ancienne m√©thode d'estimation
        if not actions_to_analyze:
            return self._estimate_exchanges_from_efficiency(solo_distance, coop_distance)
        
        # Analyser les √©changes dans les actions
        exchanges = self._detect_real_exchanges_in_actions(actions_to_analyze)
        
        # Calculer les m√©triques d'√©change
        exchange_count = len(exchanges)
        exchange_positions = set()
        exchange_durations = []
        exchange_objects = []
        
        for exchange in exchanges:
            exchange_positions.add(exchange['position'])
            exchange_durations.append(exchange['duration'])
            exchange_objects.append(exchange['object_type'])
        
        # M√©triques d√©riv√©es
        avg_exchange_duration = np.mean(exchange_durations) if exchange_durations else 0
        unique_exchange_positions = len(exchange_positions)
        object_types_exchanged = len(set(exchange_objects))
        
        # Calcul du gain d'efficacit√©
        efficiency_gain = solo_distance - coop_distance
        efficiency_percentage = (efficiency_gain / solo_distance * 100) if solo_distance > 0 else 0
        
        # Score de coop√©ration bas√© sur les √©changes r√©els
        cooperation_score = self._calculate_real_cooperation_score(
            exchange_count, unique_exchange_positions, avg_exchange_duration, efficiency_gain
        )
        
        # Densit√© d'√©change r√©elle
        exchange_density = (exchange_count / max(1, coop_distance)) * 100
        
        # Qualit√© d'interaction bas√©e sur la diversit√© et fr√©quence
        interaction_quality = min(10, (
            exchange_count * 2 + 
            unique_exchange_positions * 1.5 + 
            object_types_exchanged * 1.2
        ) / 3)
        
        print(f"   üîÑ {layout_info.get('layout_name', 'Layout')} - {exchange_count} √©changes d√©tect√©s")
        
        return {
            'exchange_count': exchange_count,
            'avg_exchange_duration': avg_exchange_duration,
            'exchange_zones': unique_exchange_positions,
            'exchange_intensity': exchange_count / max(1, unique_exchange_positions),
            'cooperation_score': cooperation_score,
            'efficiency_gain': efficiency_gain,
            'efficiency_percentage': efficiency_percentage,
            'solo_distance': solo_distance,
            'coop_distance': coop_distance,
            'exchange_density': exchange_density,
            'interaction_quality': interaction_quality,
            'exchanges_detail': exchanges,
            'object_types_exchanged': object_types_exchanged,
            'real_exchanges_detected': exchange_count > 0
        }
    
    def _create_empty_exchange_data(self) -> Dict:
        """Cr√©e une structure de donn√©es d'√©change vide"""
        return {
            'exchange_count': 0,
            'avg_exchange_duration': 0,
            'exchange_zones': 0,
            'exchange_intensity': 0,
            'cooperation_score': 0,
            'efficiency_gain': 0,
            'efficiency_percentage': 0,
            'solo_distance': 0,
            'coop_distance': 0,
            'exchange_density': 0,
            'interaction_quality': 0,
            'exchanges_detail': [],
            'object_types_exchanged': 0,
            'real_exchanges_detected': False
        }
    
    def _detect_real_exchanges_in_actions(self, actions: List) -> List[Dict]:
        """
        D√©tecte les √©changes r√©els dans la liste des actions
        
        Recherche les s√©quences:
        - Joueur A fait une action de d√©p√¥t (drop/place/deliver) √† la position P
        - Joueur B fait une action de r√©cup√©ration (pickup/grab/take) √† la position P
        """
        
        if not actions or not isinstance(actions, list):
            return []
        
        exchanges = []
        recent_drops = {}  # position -> {player, action_index, object_type, timestamp}
        
        # Actions consid√©r√©es comme des d√©p√¥ts/r√©cup√©rations
        drop_actions = {'drop', 'place', 'put_down', 'deliver', 'put', 'deposit'}
        pickup_actions = {'pickup', 'grab', 'take', 'pick_up', 'get', 'collect'}
        
        for action_index, action in enumerate(actions):
            if not isinstance(action, dict):
                continue
            
            player_id = action.get('player_id', action.get('player', action.get('agent_id', 0)))
            action_type = action.get('action_type', action.get('action', action.get('type', '')))
            position = self._extract_position_from_action(action)
            object_type = action.get('object_type', action.get('object', action.get('item', 'unknown')))
            
            if not position:
                continue
            
            # Normaliser la position en tuple pour la comparaison
            pos_key = tuple(position) if isinstance(position, (list, tuple)) else position
            
            # V√©rifier si c'est une action de d√©p√¥t
            if self._is_drop_action(action_type, drop_actions):
                recent_drops[pos_key] = {
                    'player': player_id,
                    'action_index': action_index,
                    'object_type': object_type,
                    'timestamp': action_index
                }
            
            # V√©rifier si c'est une action de r√©cup√©ration
            elif self._is_pickup_action(action_type, pickup_actions):
                # Chercher un d√©p√¥t r√©cent √† cette position par un autre joueur
                if pos_key in recent_drops:
                    drop_info = recent_drops[pos_key]
                    
                    # V√©rifier que c'est un autre joueur
                    if drop_info['player'] != player_id:
                        # V√©rifier que la r√©cup√©ration est dans un d√©lai raisonnable
                        duration = action_index - drop_info['action_index']
                        if 0 < duration <= 20:  # Max 20 actions entre d√©p√¥t et r√©cup√©ration
                            # √âchange d√©tect√© !
                            exchange = {
                                'drop_player': drop_info['player'],
                                'pickup_player': player_id,
                                'position': pos_key,
                                'object_type': object_type,
                                'duration': duration,
                                'drop_action_index': drop_info['action_index'],
                                'pickup_action_index': action_index
                            }
                            exchanges.append(exchange)
                            
                            # Supprimer le d√©p√¥t utilis√© pour √©viter les doublons
                            del recent_drops[pos_key]
        
        return exchanges
    
    def _extract_position_from_action(self, action: Dict) -> Optional[Tuple]:
        """Extrait la position d'une action"""
        
        # Essayer diff√©rents formats de position
        position_keys = ['position', 'pos', 'location', 'coordinates', 'x_y', 'coord']
        
        for key in position_keys:
            if key in action:
                pos = action[key]
                if isinstance(pos, (list, tuple)) and len(pos) >= 2:
                    return tuple(pos[:2])  # Prendre x, y
                elif isinstance(pos, dict):
                    if 'x' in pos and 'y' in pos:
                        return (pos['x'], pos['y'])
        
        # Si aucune position explicite, essayer d'extraire des coordonn√©es x, y
        if 'x' in action and 'y' in action:
            return (action['x'], action['y'])
        
        return None
    
    def _is_drop_action(self, action_type: str, drop_actions: set) -> bool:
        """V√©rifie si l'action est une action de d√©p√¥t"""
        if not isinstance(action_type, str):
            return False
        
        action_lower = action_type.lower()
        return any(drop_word in action_lower for drop_word in drop_actions)
    
    def _is_pickup_action(self, action_type: str, pickup_actions: set) -> bool:
        """V√©rifie si l'action est une action de r√©cup√©ration"""
        if not isinstance(action_type, str):
            return False
        
        action_lower = action_type.lower()
        return any(pickup_word in action_lower for pickup_word in pickup_actions)
    
    def _calculate_real_cooperation_score(self, exchange_count: int, unique_positions: int, 
                                        avg_duration: float, efficiency_gain: float) -> float:
        """Calcule un score de coop√©ration bas√© sur les √©changes r√©els"""
        
        # Score bas√© sur le nombre d'√©changes (plus = mieux)
        exchange_score = min(10, exchange_count * 1.5)
        
        # Score bas√© sur la diversit√© des positions (plus = mieux)
        position_score = min(10, unique_positions * 2)
        
        # Score bas√© sur la dur√©e des √©changes (ni trop court ni trop long)
        if avg_duration == 0:
            duration_score = 0
        elif 2 <= avg_duration <= 8:
            duration_score = 10  # Dur√©e optimale
        elif avg_duration < 2:
            duration_score = 5   # Trop rapide
        else:
            duration_score = max(0, 10 - (avg_duration - 8))  # Trop lent
        
        # Score bas√© sur l'efficacit√©
        efficiency_score = min(10, efficiency_gain / 10)
        
        # Moyenne pond√©r√©e privil√©giant les √©changes r√©els
        cooperation_score = (
            exchange_score * 0.5 +      # 50% pour le nombre d'√©changes
            position_score * 0.3 +      # 30% pour la diversit√©
            duration_score * 0.1 +      # 10% pour la qualit√© temporelle
            efficiency_score * 0.1      # 10% pour l'efficacit√©
        )
        
        return cooperation_score
    
    def _estimate_exchanges_from_efficiency(self, solo_distance: int, coop_distance: int) -> Dict:
        """Estimation des √©changes bas√©e sur l'efficacit√© quand les actions ne sont pas disponibles"""
        
        # Calcul du gain d'efficacit√©
        efficiency_gain = solo_distance - coop_distance
        efficiency_percentage = (efficiency_gain / solo_distance * 100) if solo_distance > 0 else 0
        
        # Estimation bas√©e sur l'efficacit√© (plus conservatrice)
        if efficiency_gain < 10:
            estimated_exchanges = 0
        elif efficiency_gain < 30:
            estimated_exchanges = max(1, int(efficiency_gain / 15))
        else:
            estimated_exchanges = max(2, int(efficiency_gain / 10))
        
        # Estimation de la dur√©e moyenne des √©changes
        avg_exchange_duration = max(3, min(10, int(efficiency_gain / 8)))
        
        # Zones d'√©change estim√©es
        exchange_zones = max(1, min(4, int(estimated_exchanges / 2) + 1))
        
        # Intensit√© des √©changes
        exchange_intensity = estimated_exchanges / max(1, exchange_zones)
        
        # Score de coop√©ration
        cooperation_score = self._calculate_real_cooperation_score(
            estimated_exchanges, exchange_zones, avg_exchange_duration, efficiency_gain
        )
        
        return {
            'exchange_count': estimated_exchanges,
            'avg_exchange_duration': avg_exchange_duration,
            'exchange_zones': exchange_zones,
            'exchange_intensity': exchange_intensity,
            'cooperation_score': cooperation_score,
            'efficiency_gain': efficiency_gain,
            'efficiency_percentage': efficiency_percentage,
            'solo_distance': solo_distance,
            'coop_distance': coop_distance,
            'exchange_density': estimated_exchanges / max(1, coop_distance) * 100,
            'interaction_quality': min(10, exchange_intensity * avg_exchange_duration / 5),
            'exchanges_detail': [],
            'object_types_exchanged': 1 if estimated_exchanges > 0 else 0,
            'real_exchanges_detected': False  # Estimation, pas de d√©tection r√©elle
        }
    
    def calculate_exchange_metrics(self, filtered_layouts: Dict[str, Dict]) -> Dict[str, Dict]:
        """Les m√©triques d'√©change sont d√©j√† calcul√©es lors du filtrage it√©ratif"""
        
        print(f"\nüîÑ M√©triques d'√©change d√©j√† calcul√©es pour {len(filtered_layouts)} layouts")
        return filtered_layouts
    
    def filter_layouts_by_criteria(self, exchange_metrics: Dict[str, Dict]) -> Dict[str, Dict]:
        """Les layouts sont d√©j√† filtr√©s lors du traitement it√©ratif"""
        
        print(f"\nüéØ Layouts d√©j√† filtr√©s selon les crit√®res: {len(exchange_metrics)} valid√©s")
        print(f"   ‚Ä¢ Gain d'efficacit√© minimum: {self.efficiency_threshold} steps")
        print(f"   ‚Ä¢ Nombre d'√©changes minimum: {self.min_exchange_count}")
        
        return exchange_metrics
    
    def calculate_combined_score(self, filtered_layouts: Dict[str, Dict]) -> List[Tuple[str, float, Dict]]:
        """
        Calcule un score combin√© pond√©rant √©changes r√©els et efficacit√©
        
        Score = (0.5 * normalized_real_exchanges) + (0.3 * normalized_efficiency) + 
                (0.2 * normalized_cooperation) + (bonus si √©changes r√©els d√©tect√©s)
        """
        
        print(f"\nüìä Calcul des scores combin√©s bas√©s sur les √©changes r√©els...")
        
        if not filtered_layouts:
            return []
        
        # S√©parer les layouts avec/sans √©changes r√©els d√©tect√©s
        real_exchange_layouts = {name: metrics for name, metrics in filtered_layouts.items() 
                                if metrics.get('real_exchanges_detected', False)}
        estimated_exchange_layouts = {name: metrics for name, metrics in filtered_layouts.items() 
                                     if not metrics.get('real_exchanges_detected', False)}
        
        print(f"   üéØ Layouts avec √©changes r√©els d√©tect√©s: {len(real_exchange_layouts)}")
        print(f"   üìä Layouts avec √©changes estim√©s: {len(estimated_exchange_layouts)}")
        
        # Extraire les valeurs pour normalisation
        exchange_counts = [metrics['exchange_count'] for metrics in filtered_layouts.values()]
        efficiency_gains = [metrics['efficiency_gain'] for metrics in filtered_layouts.values()]
        cooperation_scores = [metrics['cooperation_score'] for metrics in filtered_layouts.values()]
        exchange_zones = [metrics['exchange_zones'] for metrics in filtered_layouts.values()]
        
        # Normalisation (0-1)
        max_exchanges = max(exchange_counts) if exchange_counts else 1
        max_efficiency = max(efficiency_gains) if efficiency_gains else 1
        max_cooperation = max(cooperation_scores) if cooperation_scores else 1
        max_zones = max(exchange_zones) if exchange_zones else 1
        
        scored_layouts = []
        
        for layout_name, metrics in filtered_layouts.items():
            # Normalisation des composants
            norm_exchanges = metrics['exchange_count'] / max_exchanges
            norm_efficiency = metrics['efficiency_gain'] / max_efficiency
            norm_cooperation = metrics['cooperation_score'] / max_cooperation
            norm_zones = metrics['exchange_zones'] / max_zones
            
            # Bonus pour les √©changes r√©els d√©tect√©s
            real_exchange_bonus = 0.1 if metrics.get('real_exchanges_detected', False) else 0
            
            # Score combin√© avec pond√©ration privil√©giant les √©changes r√©els
            combined_score = (
                0.5 * norm_exchanges +      # 50% pour les √©changes (priorit√©)
                0.25 * norm_efficiency +    # 25% pour l'efficacit√©
                0.15 * norm_cooperation +   # 15% pour la coop√©ration
                0.1 * norm_zones +         # 10% pour la diversit√© des zones
                real_exchange_bonus        # Bonus pour √©changes r√©els
            )
            
            scored_layouts.append((layout_name, combined_score, metrics))
        
        # Trier par score d√©croissant
        scored_layouts.sort(key=lambda x: x[1], reverse=True)
        
        print(f"‚úÖ Scores calcul√©s avec priorit√© aux √©changes r√©els d√©tect√©s")
        return scored_layouts
    
    def select_top_layouts(self, scored_layouts: List[Tuple[str, float, Dict]], 
                          top_count: int = 25) -> List[Tuple[str, float, Dict]]:
        """S√©lectionne les meilleurs layouts selon le score combin√©"""
        
        selected_layouts = scored_layouts[:top_count]
        
        print(f"\nüèÜ S√©lection des {len(selected_layouts)} meilleurs layouts:")
        print(f"   Score range: {selected_layouts[-1][1]:.3f} - {selected_layouts[0][1]:.3f}")
        
        # Statistiques des layouts s√©lectionn√©s
        selected_exchanges = [metrics['exchange_count'] for _, _, metrics in selected_layouts]
        selected_efficiency = [metrics['efficiency_gain'] for _, _, metrics in selected_layouts]
        
        print(f"   √âchanges: {min(selected_exchanges)} - {max(selected_exchanges)} (moy: {np.mean(selected_exchanges):.1f})")
        print(f"   Efficacit√©: {min(selected_efficiency)} - {max(selected_efficiency)} (moy: {np.mean(selected_efficiency):.1f})")
        
        return selected_layouts
    
    def create_exchange_analysis_visualizations(self, scored_layouts: List[Tuple[str, float, Dict]]) -> List[str]:
        """Cr√©e les visualisations d'analyse des √©changes"""
        
        print(f"\nüìä G√©n√©ration des visualisations...")
        
        if not scored_layouts:
            print("‚ùå Aucune donn√©e √† visualiser")
            return []
        
        visualization_files = []
        
        # Pr√©parer les donn√©es
        layout_names = [name[:20] + "..." if len(name) > 20 else name for name, _, _ in scored_layouts]
        scores = [score for _, score, _ in scored_layouts]
        exchange_counts = [metrics['exchange_count'] for _, _, metrics in scored_layouts]
        efficiency_gains = [metrics['efficiency_gain'] for _, _, metrics in scored_layouts]
        cooperation_scores = [metrics['cooperation_score'] for _, _, metrics in scored_layouts]
        solo_distances = [metrics['solo_distance'] for _, _, metrics in scored_layouts]
        coop_distances = [metrics['coop_distance'] for _, _, metrics in scored_layouts]
        
        # 1. Graphique principal: Score combin√© vs √âchanges vs Efficacit√©
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(20, 16))
        
        # Graphique 1: Comparaison Solo vs Duo avec √©changes
        x = np.arange(len(layout_names))
        width = 0.35
        
        bars1 = ax1.bar(x - width/2, solo_distances, width, label='Solo', 
                       alpha=0.8, color='skyblue', edgecolor='navy')
        bars2 = ax1.bar(x + width/2, coop_distances, width, label='Duo', 
                       alpha=0.8, color='lightcoral', edgecolor='darkred')
        
        ax1.set_title('Distances Solo vs Duo - Layouts Optimis√©s pour les √âchanges\n'
                     f'Top {len(layout_names)} layouts avec le plus d\'interactions', 
                     fontsize=14, fontweight='bold')
        ax1.set_xlabel('Layouts (tri√©s par score d\'√©change)', fontsize=12)
        ax1.set_ylabel('Distance Totale', fontsize=12)
        ax1.set_xticks(x)
        ax1.set_xticklabels(layout_names, rotation=45, ha='right')
        ax1.legend()
        ax1.grid(True, alpha=0.3, axis='y')
        
        # Ajouter le nombre d'√©changes au-dessus des barres
        for i, exchanges in enumerate(exchange_counts):
            ax1.text(i, max(solo_distances[i], coop_distances[i]) + 5, 
                    f'{exchanges} √©ch.', ha='center', va='bottom', 
                    fontsize=8, fontweight='bold', color='purple')
        
        # Graphique 2: Score combin√© par layout
        colors = plt.cm.RdYlBu_r([score/max(scores) for score in scores])
        bars = ax2.bar(x, scores, color=colors, alpha=0.8, edgecolor='black')
        
        ax2.set_title('Score Combin√© d\'√âchange et d\'Efficacit√©', 
                     fontsize=14, fontweight='bold')
        ax2.set_xlabel('Layouts', fontsize=12)
        ax2.set_ylabel('Score Combin√© (0-1)', fontsize=12)
        ax2.set_xticks(x)
        ax2.set_xticklabels(layout_names, rotation=45, ha='right')
        ax2.grid(True, alpha=0.3, axis='y')
        
        # Graphique 3: Relation √âchanges vs Efficacit√©
        scatter = ax3.scatter(exchange_counts, efficiency_gains, 
                            c=scores, s=100, alpha=0.7, cmap='viridis', edgecolors='black')
        
        ax3.set_title('Relation: Nombre d\'√âchanges vs Gain d\'Efficacit√©', 
                     fontsize=14, fontweight='bold')
        ax3.set_xlabel('Nombre d\'√âchanges entre Joueurs', fontsize=12)
        ax3.set_ylabel('Gain d\'Efficacit√© (Solo - Duo)', fontsize=12)
        ax3.grid(True, alpha=0.3)
        
        # Ajouter une colorbar
        cbar = plt.colorbar(scatter, ax=ax3)
        cbar.set_label('Score Combin√©', fontsize=10)
        
        # Ligne de tendance
        if len(exchange_counts) > 1:
            z = np.polyfit(exchange_counts, efficiency_gains, 1)
            p = np.poly1d(z)
            ax3.plot(exchange_counts, p(exchange_counts), "r--", alpha=0.8, 
                    label=f'Tendance: y={z[0]:.1f}x+{z[1]:.1f}')
            ax3.legend()
        
        # Graphique 4: Distribution des scores de coop√©ration
        ax4.hist(cooperation_scores, bins=15, alpha=0.7, color='lightgreen', 
                edgecolor='darkgreen', density=True)
        
        # Ajouter les statistiques
        mean_coop = np.mean(cooperation_scores)
        std_coop = np.std(cooperation_scores)
        
        ax4.axvline(mean_coop, color='red', linestyle='--', linewidth=2, 
                   label=f'Moyenne: {mean_coop:.2f}')
        ax4.axvline(mean_coop + std_coop, color='orange', linestyle=':', linewidth=2, 
                   label=f'+1œÉ: {mean_coop + std_coop:.2f}')
        
        ax4.set_title('Distribution des Scores de Coop√©ration', 
                     fontsize=14, fontweight='bold')
        ax4.set_xlabel('Score de Coop√©ration', fontsize=12)
        ax4.set_ylabel('Densit√©', fontsize=12)
        ax4.legend()
        ax4.grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        # Sauvegarder
        output_path = f"{self.output_dir}/exchange_based_analysis_main.png"
        plt.savefig(output_path, dpi=300, bbox_inches='tight')
        plt.close()
        
        visualization_files.append(output_path)
        print(f"   ‚úÖ Graphique principal sauvegard√©: {os.path.basename(output_path)}")
        
        # 2. Analyse d√©taill√©e des √©changes
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(20, 16))
        
        # M√©triques d'√©change additionnelles
        exchange_densities = [metrics['exchange_density'] for _, _, metrics in scored_layouts]
        interaction_qualities = [metrics['interaction_quality'] for _, _, metrics in scored_layouts]
        avg_exchange_durations = [metrics['avg_exchange_duration'] for _, _, metrics in scored_layouts]
        exchange_zones = [metrics['exchange_zones'] for _, _, metrics in scored_layouts]
        
        # Graphique 1: Densit√© d'√©change
        ax1.bar(x, exchange_densities, color='cyan', alpha=0.7, edgecolor='teal')
        ax1.set_title('Densit√© d\'√âchanges par Layout\n(√âchanges pour 100 steps)', 
                     fontsize=14, fontweight='bold')
        ax1.set_xlabel('Layouts', fontsize=12)
        ax1.set_ylabel('Densit√© d\'√âchanges', fontsize=12)
        ax1.set_xticks(x)
        ax1.set_xticklabels(layout_names, rotation=45, ha='right')
        ax1.grid(True, alpha=0.3, axis='y')
        
        # Graphique 2: Qualit√© des interactions
        ax2.bar(x, interaction_qualities, color='gold', alpha=0.7, edgecolor='orange')
        ax2.set_title('Qualit√© des Interactions entre Joueurs', 
                     fontsize=14, fontweight='bold')
        ax2.set_xlabel('Layouts', fontsize=12)
        ax2.set_ylabel('Score de Qualit√© d\'Interaction', fontsize=12)
        ax2.set_xticks(x)
        ax2.set_xticklabels(layout_names, rotation=45, ha='right')
        ax2.grid(True, alpha=0.3, axis='y')
        
        # Graphique 3: Dur√©e moyenne des √©changes
        ax3.scatter(avg_exchange_durations, exchange_counts, 
                   c=efficiency_gains, s=80, alpha=0.7, cmap='plasma', edgecolors='black')
        ax3.set_title('Dur√©e vs Nombre d\'√âchanges\n(Couleur = Gain d\'efficacit√©)', 
                     fontsize=14, fontweight='bold')
        ax3.set_xlabel('Dur√©e Moyenne des √âchanges (steps)', fontsize=12)
        ax3.set_ylabel('Nombre d\'√âchanges', fontsize=12)
        ax3.grid(True, alpha=0.3)
        
        # Graphique 4: Zones d'√©change
        ax4.scatter(exchange_zones, exchange_counts, 
                   c=scores, s=100, alpha=0.7, cmap='viridis', edgecolors='black')
        ax4.set_title('Zones d\'√âchange vs Nombre d\'√âchanges\n(Couleur = Score combin√©)', 
                     fontsize=14, fontweight='bold')
        ax4.set_xlabel('Nombre de Zones d\'√âchange', fontsize=12)
        ax4.set_ylabel('Nombre d\'√âchanges', fontsize=12)
        ax4.grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        # Sauvegarder
        output_path2 = f"{self.output_dir}/exchange_detailed_metrics.png"
        plt.savefig(output_path2, dpi=300, bbox_inches='tight')
        plt.close()
        
        visualization_files.append(output_path2)
        print(f"   ‚úÖ M√©triques d√©taill√©es sauvegard√©es: {os.path.basename(output_path2)}")
        
        # 3. Comparaison efficacit√© vs √©changes
        self._create_efficiency_exchange_comparison(scored_layouts, visualization_files)
        
        return visualization_files
    
    def _create_efficiency_exchange_comparison(self, scored_layouts: List[Tuple[str, float, Dict]], 
                                             visualization_files: List[str]) -> None:
        """Cr√©e une comparaison d√©taill√©e efficacit√© vs √©changes"""
        
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(20, 16))
        
        # Pr√©parer les donn√©es
        exchange_counts = [metrics['exchange_count'] for _, _, metrics in scored_layouts]
        efficiency_gains = [metrics['efficiency_gain'] for _, _, metrics in scored_layouts]
        efficiency_percentages = [metrics['efficiency_percentage'] for _, _, metrics in scored_layouts]
        scores = [score for _, score, _ in scored_layouts]
        
        # Graphique 1: Histogramme des gains d'efficacit√©
        ax1.hist(efficiency_gains, bins=15, alpha=0.7, color='lightblue', 
                edgecolor='darkblue', density=False)
        ax1.axvline(np.mean(efficiency_gains), color='red', linestyle='--', linewidth=2,
                   label=f'Moyenne: {np.mean(efficiency_gains):.1f}')
        ax1.set_title('Distribution des Gains d\'Efficacit√©\nLayouts S√©lectionn√©s', 
                     fontsize=14, fontweight='bold')
        ax1.set_xlabel('Gain d\'Efficacit√© (Solo - Duo)', fontsize=12)
        ax1.set_ylabel('Nombre de Layouts', fontsize=12)
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # Graphique 2: Histogramme des √©changes
        ax2.hist(exchange_counts, bins=10, alpha=0.7, color='lightcoral', 
                edgecolor='darkred', density=False)
        ax2.axvline(np.mean(exchange_counts), color='blue', linestyle='--', linewidth=2,
                   label=f'Moyenne: {np.mean(exchange_counts):.1f}')
        ax2.set_title('Distribution du Nombre d\'√âchanges\nLayouts S√©lectionn√©s', 
                     fontsize=14, fontweight='bold')
        ax2.set_xlabel('Nombre d\'√âchanges entre Joueurs', fontsize=12)
        ax2.set_ylabel('Nombre de Layouts', fontsize=12)
        ax2.legend()
        ax2.grid(True, alpha=0.3)
        
        # Graphique 3: Relation efficacit√© vs √©changes avec annotations
        scatter = ax3.scatter(efficiency_gains, exchange_counts, 
                            c=scores, s=100, alpha=0.7, cmap='RdYlBu_r', edgecolors='black')
        
        # Diviser en quadrants
        mean_efficiency = np.mean(efficiency_gains)
        mean_exchanges = np.mean(exchange_counts)
        
        ax3.axhline(mean_exchanges, color='gray', linestyle=':', alpha=0.5)
        ax3.axvline(mean_efficiency, color='gray', linestyle=':', alpha=0.5)
        
        # Annoter les quadrants
        ax3.text(max(efficiency_gains) * 0.8, max(exchange_counts) * 0.9, 
                'Haute Efficacit√©\nHauts √âchanges\n(OPTIMAL)', 
                ha='center', va='center', fontsize=10, fontweight='bold',
                bbox=dict(boxstyle="round,pad=0.3", facecolor="lightgreen", alpha=0.7))
        
        ax3.text(min(efficiency_gains) * 1.2, max(exchange_counts) * 0.9, 
                'Basse Efficacit√©\nHauts √âchanges\n(SOCIAL)', 
                ha='center', va='center', fontsize=10, fontweight='bold',
                bbox=dict(boxstyle="round,pad=0.3", facecolor="lightyellow", alpha=0.7))
        
        ax3.set_title('Quadrants Efficacit√© vs √âchanges\n(Couleur = Score Combin√©)', 
                     fontsize=14, fontweight='bold')
        ax3.set_xlabel('Gain d\'Efficacit√© (Solo - Duo)', fontsize=12)
        ax3.set_ylabel('Nombre d\'√âchanges', fontsize=12)
        ax3.grid(True, alpha=0.3)
        
        # Colorbar
        cbar = plt.colorbar(scatter, ax=ax3)
        cbar.set_label('Score Combin√©', fontsize=10)
        
        # Graphique 4: Top 10 avec barres d'efficacit√© et √©changes
        top_10 = scored_layouts[:10]
        top_names = [name[:15] + "..." if len(name) > 15 else name for name, _, _ in top_10]
        top_efficiency = [metrics['efficiency_gain'] for _, _, metrics in top_10]
        top_exchanges = [metrics['exchange_count'] for _, _, metrics in top_10]
        
        x_top = np.arange(len(top_10))
        width = 0.35
        
        ax4_twin = ax4.twinx()
        
        bars1 = ax4.bar(x_top - width/2, top_efficiency, width, label='Gain d\'Efficacit√©', 
                       alpha=0.8, color='steelblue')
        bars2 = ax4_twin.bar(x_top + width/2, top_exchanges, width, label='Nombre d\'√âchanges', 
                            alpha=0.8, color='coral')
        
        ax4.set_title('Top 10: Efficacit√© et √âchanges Combin√©s', 
                     fontsize=14, fontweight='bold')
        ax4.set_xlabel('Layouts (class√©s par score)', fontsize=12)
        ax4.set_ylabel('Gain d\'Efficacit√© (steps)', fontsize=12, color='steelblue')
        ax4_twin.set_ylabel('Nombre d\'√âchanges', fontsize=12, color='coral')
        
        ax4.set_xticks(x_top)
        ax4.set_xticklabels(top_names, rotation=45, ha='right')
        ax4.grid(True, alpha=0.3, axis='y')
        
        # L√©gendes
        ax4.legend(loc='upper left')
        ax4_twin.legend(loc='upper right')
        
        plt.tight_layout()
        
        # Sauvegarder
        output_path = f"{self.output_dir}/efficiency_exchange_comparison.png"
        plt.savefig(output_path, dpi=300, bbox_inches='tight')
        plt.close()
        
        visualization_files.append(output_path)
        print(f"   ‚úÖ Comparaison efficacit√©-√©changes sauvegard√©e: {os.path.basename(output_path)}")
    
    def copy_selected_layouts(self, selected_layouts: List[Tuple[str, float, Dict]]) -> int:
        """Copie les layouts s√©lectionn√©s vers le dossier de destination"""
        
        print(f"\nüìÅ Copie des {len(selected_layouts)} layouts s√©lectionn√©s...")
        
        copied_count = 0
        failed_count = 0
        
        # Cr√©er un fichier de r√©sum√©
        summary_file = f"{self.selected_layouts_dir}/layouts_√©changes_r√©sum√©.txt"
        
        with open(summary_file, 'w', encoding='utf-8') as f:
            f.write("="*70 + "\n")
            f.write("LAYOUTS S√âLECTIONN√âS - OPTIMISATION DES √âCHANGES\n")
            f.write("="*70 + "\n\n")
            f.write(f"Date de s√©lection: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"Crit√®re: Maximisation des √©changes avec efficacit√© significative\n")
            f.write(f"Nombre de layouts s√©lectionn√©s: {len(selected_layouts)}\n\n")
            
            f.write("PARAM√àTRES DE S√âLECTION:\n")
            f.write(f"‚Ä¢ Gain d'efficacit√© minimum: {self.efficiency_threshold} steps\n")
            f.write(f"‚Ä¢ Nombre d'√©changes minimum: {self.min_exchange_count}\n")
            f.write(f"‚Ä¢ Distance seuil pour √©changes: {self.exchange_distance_threshold}\n")
            f.write(f"‚Ä¢ Dur√©e minimale d'√©change: {self.min_exchange_duration} steps\n\n")
            
            f.write("LAYOUTS S√âLECTIONN√âS:\n")
            f.write("-" * 50 + "\n")
            f.write(f"{'Rang':<4} {'Layout':<40} {'Score':<8} {'√âchanges':<9} {'Efficacit√©':<10}\n")
            f.write("-" * 50 + "\n")
            
            for i, (layout_name, score, metrics) in enumerate(selected_layouts, 1):
                f.write(f"{i:2d}.  {layout_name:<40} {score:6.3f}  {metrics['exchange_count']:7d}  "
                       f"{metrics['efficiency_gain']:8.1f}\n")
                
                # Chercher le fichier layout correspondant
                layout_files = glob.glob(f"{self.layouts_source_dir}/**/*{layout_name}*.layout", 
                                       recursive=True)
                
                if layout_files:
                    source_file = layout_files[0]  # Prendre le premier trouv√©
                    destination_file = f"{self.selected_layouts_dir}/{layout_name}.layout"
                    
                    try:
                        shutil.copy2(source_file, destination_file)
                        copied_count += 1
                    except Exception as e:
                        print(f"‚ùå Erreur copie {layout_name}: {e}")
                        failed_count += 1
                        f.write(f"    ‚ùå ERREUR COPIE: {e}\n")
                else:
                    print(f"‚ùå Fichier non trouv√©: {layout_name}")
                    failed_count += 1
                    f.write(f"    ‚ùå FICHIER NON TROUV√â\n")
            
            f.write(f"\nR√âSULTAT COPIE:\n")
            f.write(f"‚úÖ Layouts copi√©s avec succ√®s: {copied_count}\n")
            f.write(f"‚ùå √âchecs de copie: {failed_count}\n")
        
        print(f"‚úÖ Copie termin√©e: {copied_count}/{len(selected_layouts)} layouts copi√©s")
        print(f"üìÑ R√©sum√© sauvegard√©: {summary_file}")
        
        return copied_count
    
    def generate_comprehensive_report(self, scored_layouts: List[Tuple[str, float, Dict]], 
                                    copied_count: int) -> str:
        """G√©n√®re un rapport complet de l'analyse des √©changes"""
        
        report_path = f"{self.output_dir}/exchange_analysis_report.txt"
        
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write("="*80 + "\n")
            f.write("RAPPORT COMPLET - S√âLECTION DE LAYOUTS BAS√âE SUR LES √âCHANGES\n")
            f.write("="*80 + "\n\n")
            
            f.write(f"üìÖ Date d'analyse: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"üéØ Objectif: S√©lection de layouts maximisant les √©changes coop√©ratifs\n")
            f.write(f"üß† Contexte: Recherche en sciences cognitives sur la coop√©ration\n\n")
            
            # 1. M√©thodologie
            f.write("üìã M√âTHODOLOGIE APPLIQU√âE\n")
            f.write("-" * 25 + "\n")
            f.write("1. Analyse des donn√©es de performance Solo vs Duo\n")
            f.write("2. Simulation des √©changes bas√©e sur les gains d'efficacit√©\n")
            f.write("3. Calcul des m√©triques d'interaction (nombre, dur√©e, zones)\n")
            f.write("4. Score combin√© pond√©rant √©changes (40%) et efficacit√© (30%)\n")
            f.write("5. S√©lection des layouts avec le meilleur √©quilibre\n\n")
            
            # 2. Param√®tres utilis√©s
            f.write("‚öôÔ∏è  PARAM√àTRES DE S√âLECTION\n")
            f.write("-" * 28 + "\n")
            f.write(f"Gain d'efficacit√© minimum: {self.efficiency_threshold} steps\n")
            f.write(f"Nombre d'√©changes minimum: {self.min_exchange_count}\n")
            f.write(f"Distance seuil pour √©changes: {self.exchange_distance_threshold}\n")
            f.write(f"Dur√©e minimale d'√©change: {self.min_exchange_duration} steps\n\n")
            
            # 3. Statistiques globales
            if scored_layouts:
                all_scores = [score for _, score, _ in scored_layouts]
                all_exchanges = [metrics['exchange_count'] for _, _, metrics in scored_layouts]
                all_efficiency = [metrics['efficiency_gain'] for _, _, metrics in scored_layouts]
                all_cooperation = [metrics['cooperation_score'] for _, _, metrics in scored_layouts]
                
                f.write("üìä STATISTIQUES DES LAYOUTS S√âLECTIONN√âS\n")
                f.write("-" * 40 + "\n")
                f.write(f"Nombre total de layouts analys√©s: {len(scored_layouts)}\n")
                f.write(f"Layouts finalement retenus: {copied_count}\n\n")
                
                f.write("SCORES COMBIN√âS:\n")
                f.write(f"‚Ä¢ Range: {min(all_scores):.3f} - {max(all_scores):.3f}\n")
                f.write(f"‚Ä¢ Moyenne: {np.mean(all_scores):.3f} ¬± {np.std(all_scores):.3f}\n")
                f.write(f"‚Ä¢ M√©diane: {np.median(all_scores):.3f}\n\n")
                
                f.write("√âCHANGES ENTRE JOUEURS:\n")
                f.write(f"‚Ä¢ Range: {min(all_exchanges)} - {max(all_exchanges)} √©changes\n")
                f.write(f"‚Ä¢ Moyenne: {np.mean(all_exchanges):.1f} ¬± {np.std(all_exchanges):.1f}\n")
                f.write(f"‚Ä¢ M√©diane: {np.median(all_exchanges):.1f}\n\n")
                
                f.write("GAINS D'EFFICACIT√â:\n")
                f.write(f"‚Ä¢ Range: {min(all_efficiency):.1f} - {max(all_efficiency):.1f} steps\n")
                f.write(f"‚Ä¢ Moyenne: {np.mean(all_efficiency):.1f} ¬± {np.std(all_efficiency):.1f}\n")
                f.write(f"‚Ä¢ M√©diane: {np.median(all_efficiency):.1f}\n\n")
                
                f.write("SCORES DE COOP√âRATION:\n")
                f.write(f"‚Ä¢ Range: {min(all_cooperation):.2f} - {max(all_cooperation):.2f}\n")
                f.write(f"‚Ä¢ Moyenne: {np.mean(all_cooperation):.2f} ¬± {np.std(all_cooperation):.2f}\n")
                f.write(f"‚Ä¢ M√©diane: {np.median(all_cooperation):.2f}\n\n")
            
            # 4. Top 15 des layouts
            f.write("üèÜ TOP 15 DES LAYOUTS S√âLECTIONN√âS\n")
            f.write("-" * 35 + "\n")
            f.write(f"{'Rang':<4} {'Layout':<40} {'Score':<8} {'√âch.':<5} {'Eff.':<6} {'Coop.':<6}\n")
            f.write("-" * 70 + "\n")
            
            for i, (layout_name, score, metrics) in enumerate(scored_layouts[:15], 1):
                f.write(f"{i:2d}.  {layout_name:<40} {score:6.3f}  "
                       f"{metrics['exchange_count']:3d}  "
                       f"{metrics['efficiency_gain']:5.0f}  "
                       f"{metrics['cooperation_score']:5.2f}\n")
            
            if len(scored_layouts) > 15:
                f.write(f"... et {len(scored_layouts) - 15} autres layouts\n")
            
            # 5. Cat√©gorisation des layouts
            if scored_layouts:
                f.write(f"\nüìà CAT√âGORISATION PAR PERFORMANCE\n")
                f.write("-" * 35 + "\n")
                
                high_exchange = sum(1 for _, _, metrics in scored_layouts 
                                  if metrics['exchange_count'] >= 15)
                medium_exchange = sum(1 for _, _, metrics in scored_layouts 
                                    if 10 <= metrics['exchange_count'] < 15)
                low_exchange = sum(1 for _, _, metrics in scored_layouts 
                                 if metrics['exchange_count'] < 10)
                
                f.write(f"Hauts √©changes (‚â•15): {high_exchange} layouts\n")
                f.write(f"√âchanges moyens (10-14): {medium_exchange} layouts\n")
                f.write(f"√âchanges mod√©r√©s (<10): {low_exchange} layouts\n\n")
                
                high_efficiency = sum(1 for _, _, metrics in scored_layouts 
                                    if metrics['efficiency_gain'] >= 50)
                medium_efficiency = sum(1 for _, _, metrics in scored_layouts 
                                      if 25 <= metrics['efficiency_gain'] < 50)
                
                f.write(f"Haute efficacit√© (‚â•50 steps): {high_efficiency} layouts\n")
                f.write(f"Efficacit√© moyenne (25-49 steps): {medium_efficiency} layouts\n")
            
            # 6. Recommandations
            f.write(f"\nüí° RECOMMANDATIONS POUR L'EXP√âRIENCE\n")
            f.write("-" * 40 + "\n")
            f.write("1. Utiliser prioritairement les layouts du Top 10\n")
            f.write("2. √âquilibrer les sessions entre hauts/moyens √©changes\n")
            f.write("3. Consid√©rer l'ordre de pr√©sentation selon la difficult√©\n")
            f.write("4. Monitorer les interactions r√©elles vs pr√©dictions\n\n")
            
            f.write(f"üìä Visualisations g√©n√©r√©es dans: {self.output_dir}\n")
            f.write(f"üìÅ Layouts copi√©s dans: {self.selected_layouts_dir}\n")
        
        return report_path
    
    def export_data_for_analysis(self, scored_layouts: List[Tuple[str, float, Dict]]) -> str:
        """Exporte les donn√©es au format CSV pour analyses ult√©rieures"""
        
        csv_path = f"{self.output_dir}/exchange_layout_data.csv"
        
        # Pr√©parer les donn√©es pour le DataFrame
        data_rows = []
        for layout_name, combined_score, metrics in scored_layouts:
            row = {
                'layout_name': layout_name,
                'combined_score': combined_score,
                'exchange_count': metrics['exchange_count'],
                'avg_exchange_duration': metrics['avg_exchange_duration'],
                'exchange_zones': metrics['exchange_zones'],
                'exchange_intensity': metrics['exchange_intensity'],
                'cooperation_score': metrics['cooperation_score'],
                'efficiency_gain': metrics['efficiency_gain'],
                'efficiency_percentage': metrics['efficiency_percentage'],
                'solo_distance': metrics['solo_distance'],
                'coop_distance': metrics['coop_distance'],
                'exchange_density': metrics['exchange_density'],
                'interaction_quality': metrics['interaction_quality']
            }
            data_rows.append(row)
        
        # Cr√©er et sauvegarder le DataFrame
        df = pd.DataFrame(data_rows)
        df.to_csv(csv_path, index=False, encoding='utf-8')
        
        print(f"üìä Donn√©es export√©es au format CSV: {csv_path}")
        return csv_path
    
    def run_complete_exchange_analysis(self):
        """Ex√©cute l'analyse compl√®te bas√©e sur les √©changes avec traitement √©conome en m√©moire"""
        
        print("üîÑ D√âMARRAGE DE L'ANALYSE BAS√âE SUR LES √âCHANGES")
        print("="*60)
        print("üíæ Mode √©conome en m√©moire activ√© - traitement it√©ratif")
        
        # 1. Traitement it√©ratif des donn√©es (charge + filtre + calcule en une passe)
        filtered_layouts = self.process_evaluation_files_iteratively()
        if not filtered_layouts:
            print("‚ùå Aucun layout ne passe les crit√®res. Ajustez les param√®tres.")
            return
        
        # 2. Les m√©triques d'√©change sont d√©j√† calcul√©es
        exchange_metrics = self.calculate_exchange_metrics(filtered_layouts)
        
        # 3. Les layouts sont d√©j√† filtr√©s
        validated_layouts = self.filter_layouts_by_criteria(exchange_metrics)
        
        # 4. Calculer les scores combin√©s
        scored_layouts = self.calculate_combined_score(validated_layouts)
        
        # 5. S√©lectionner les meilleurs
        selected_layouts = self.select_top_layouts(scored_layouts, top_count=25)
        
        # 6. Cr√©er les visualisations
        visualization_files = self.create_exchange_analysis_visualizations(selected_layouts)
        
        # 7. Copier les layouts s√©lectionn√©s
        copied_count = self.copy_selected_layouts(selected_layouts)
        
        # 8. G√©n√©rer le rapport complet
        report_path = self.generate_comprehensive_report(selected_layouts, copied_count)
        
        # 9. Exporter les donn√©es CSV
        csv_path = self.export_data_for_analysis(selected_layouts)
        
        # R√©sum√© final
        print(f"\nüéâ ANALYSE TERMIN√âE AVEC SUCC√àS!")
        print("="*50)
        print(f"üìä Layouts analys√©s au total: {self.total_processed_count}")
        print(f"üéØ Layouts valid√©s: {len(filtered_layouts)}")
        print(f"‚úÖ Layouts s√©lectionn√©s: {len(selected_layouts)}")
        print(f"üìÅ Layouts copi√©s: {copied_count}")
        print(f"üìà Visualisations: {len(visualization_files)}")
        print(f"üìÑ Rapport: {report_path}")
        print(f"üìä Donn√©es CSV: {csv_path}")
        print(f"\nüéØ Les layouts optimisant les √©changes coop√©ratifs sont pr√™ts!")


def main():
    """Fonction principale pour la s√©lection bas√©e sur les √©changes"""
    
    print("ü§ù EXCHANGE-BASED LAYOUT SELECTOR - OVERCOOKED")
    print("S√©lection de layouts optimisant les √©changes coop√©ratifs")
    print("Sp√©cialement con√ßu pour la recherche en sciences cognitives")
    print()
    
    selector = ExchangeBasedLayoutSelector()
    selector.run_complete_exchange_analysis()


if __name__ == "__main__":
    main()
