#!/usr/bin/env python3
"""
Shortest Path Evaluator - Analyseur des diff√©rences de distances solo vs duo

Ce module analyse les diff√©rences de distances entre les modes solo et duo pour:
1. Visualiser les distances solo et duo par layout
2. Calculer et visualiser les diff√©rences entre solo et duo
3. S√©lectionner les layouts avec les plus grandes diff√©rences
4. Analyser la r√©partition des √©tapes totales en mode duo

Author: Assistant
Date: 2025
"""

import os
import json
import glob
import numpy as np
import matplotlib.pyplot as plt
from collections import defaultdict
from typing import Dict, List, Tuple, Optional
from pathlib import Path
from datetime import datetime
import statistics

class ShortestPathAnalyzer:
    """Analyseur des diff√©rences de distances solo vs duo"""
    
    def __init__(self, base_category: str = "all"):
        """
        Initialise l'analyseur pour les donn√©es de path evaluation.
        
        Args:
            base_category: Type d'analyse ("all" pour toutes les donn√©es)
        """
        self.base_category = base_category
        
        # Dossier de donn√©es
        self.data_dir = "path_evaluation_results"
        
        # Dossier de sortie
        self.output_dir = f"analysis_plots/path_comparison_analysis"
        os.makedirs(self.output_dir, exist_ok=True)
        
    def discover_layout_data(self) -> List[Dict]:
        """D√©couvre et charge tous les donn√©es de layouts depuis path_evaluation_results"""
        
        all_layout_data = []
        
        if not os.path.exists(self.data_dir):
            print(f"‚ùå Dossier {self.data_dir} non trouv√©!")
            return []
        
        # Chercher tous les fichiers recette_lot_X_results.json
        json_files = glob.glob(os.path.join(self.data_dir, "recette_lot_*_results.json"))
        
        print(f"üîç Fichiers trouv√©s: {len(json_files)} fichiers de donn√©es")
        
        for json_file in json_files:
            try:
                print(f"   üìÇ Chargement de {os.path.basename(json_file)}...", end=" ")
                
                with open(json_file, 'r') as f:
                    data = json.load(f)
                    
                    # Chaque fichier contient une liste de layouts avec leurs donn√©es
                    for layout_info in data:
                        if all(key in layout_info for key in ['layout_path', 'solo_distance', 'coop_distance']):
                            # Extraire le nom du layout depuis le path
                            layout_name = os.path.basename(layout_info['layout_path']).replace('.layout', '')
                            
                            layout_data = {
                                'layout_name': layout_name,
                                'layout_path': layout_info['layout_path'],
                                'solo_distance': layout_info['solo_distance'],
                                'coop_distance': layout_info['coop_distance'],
                                'improvement_ratio': layout_info.get('improvement_ratio', 0),
                                'difference': layout_info['coop_distance'] - layout_info['solo_distance'],
                                'efficiency_gain': layout_info['solo_distance'] - layout_info['coop_distance']
                            }
                            
                            all_layout_data.append(layout_data)
                    
                    print(f"‚úÖ {len(data)} layouts charg√©s")
                    
            except Exception as e:
                print(f"‚ùå Erreur: {e}")
                continue
        
        print(f"\n‚úÖ Total: {len(all_layout_data)} layouts charg√©s depuis tous les fichiers")
        return all_layout_data
    
    def analyze_layouts_comparison(self, layout_data: List[Dict]) -> Dict[str, Dict]:
        """Analyse comparative des layouts entre solo et duo"""
        
        comparison_data = {}
        
        print(f"\nüìä Analyse de {len(layout_data)} layouts...")
        
        for i, layout_info in enumerate(layout_data):
            layout_name = layout_info['layout_name']
            
            if i % 1000 == 0:
                print(f"   Traitement: {i}/{len(layout_data)} layouts...")
            
            # Calculer les statistiques
            solo_dist = layout_info['solo_distance']
            coop_dist = layout_info['coop_distance']
            
            difference = coop_dist - solo_dist
            ratio = coop_dist / solo_dist if solo_dist > 0 else 0
            
            comparison_data[layout_name] = {
                'layout_name': layout_name,
                'layout_path': layout_info['layout_path'],
                'solo_distance': solo_dist,
                'coop_distance': coop_dist,
                'steps_difference': difference,
                'steps_ratio': ratio,
                'efficiency_gain': -difference,  # Gain n√©gatif = plus d'√©tapes en duo
                'improvement_ratio': layout_info.get('improvement_ratio', abs(difference/solo_dist) if solo_dist > 0 else 0)
            }
        
        print(f"\n‚úÖ {len(comparison_data)} layouts analys√©s")
        return comparison_data
    
    def create_steps_comparison_chart(self, comparison_data: Dict[str, Dict]) -> str:
        """Cr√©e un graphique comparatif des distances solo vs duo"""
        
        layout_names = []
        solo_distances = []
        coop_distances = []
        
        # Prendre un √©chantillon repr√©sentatif pour l'affichage (sinon trop de donn√©es)
        sample_size = min(100, len(comparison_data))
        sampled_data = dict(list(comparison_data.items())[:sample_size])
        
        for layout_name, data in sampled_data.items():
            layout_names.append(layout_name[:15] + "..." if len(layout_name) > 15 else layout_name)
            solo_distances.append(data['solo_distance'])
            coop_distances.append(data['coop_distance'])
        
        plt.figure(figsize=(20, 12))
        
        # Cr√©er le graphique
        x = np.arange(len(layout_names))
        width = 0.35
        
        bars1 = plt.bar(x - width/2, solo_distances, width, label='Solo', 
                       alpha=0.8, color='blue', edgecolor='navy')
        bars2 = plt.bar(x + width/2, coop_distances, width, label='Duo', 
                       alpha=0.8, color='red', edgecolor='darkred')
        
        # Configuration
        plt.title(f'Comparaison des Distances: Solo vs Duo\n'
                 f'√âchantillon de {len(sampled_data)} layouts (total: {len(comparison_data)})', 
                 fontsize=16, fontweight='bold')
        plt.xlabel('Layouts', fontsize=12)
        plt.ylabel('Distance Totale', fontsize=12)
        plt.legend(fontsize=12)
        
        # Configurer les ticks de l'axe X
        plt.xticks(x, layout_names, rotation=45, ha='right')
        plt.grid(True, alpha=0.3, axis='y')
        
        # Ajouter des statistiques
        all_solo = [data['solo_distance'] for data in comparison_data.values()]
        all_coop = [data['coop_distance'] for data in comparison_data.values()]
        
        avg_solo = np.mean(all_solo)
        avg_coop = np.mean(all_coop)
        avg_difference = avg_coop - avg_solo
        
        stats_text = (f'Moyennes globales:\n'
                     f'Solo: {avg_solo:.1f} steps\n'
                     f'Duo: {avg_coop:.1f} steps\n'
                     f'Diff√©rence: {avg_difference:.1f} steps\n'
                     f'Am√©lioration: {(avg_solo-avg_coop)/avg_solo*100:.1f}%')
        
        plt.text(0.02, 0.98, stats_text, transform=plt.gca().transAxes, 
                fontsize=12, verticalalignment='top',
                bbox=dict(boxstyle="round,pad=0.4", facecolor="lightgreen", alpha=0.8))
        
        plt.tight_layout()
        
        # Sauvegarder
        output_path = f"{self.output_dir}/distances_comparison_solo_vs_duo.png"
        plt.savefig(output_path, dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"   ‚úÖ Graphique des comparaisons sauvegard√©: {output_path}")
        return output_path
    
    def create_difference_analysis_chart(self, comparison_data: Dict[str, Dict]) -> str:
        """Cr√©e un graphique d'analyse des diff√©rences solo-duo"""
        
        differences = [data['steps_difference'] for data in comparison_data.values()]
        ratios = [data['steps_ratio'] for data in comparison_data.values()]
        improvements = [data['efficiency_gain'] for data in comparison_data.values()]
        
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(20, 16))
        
        # Graphique 1: Histogramme des diff√©rences
        ax1.hist(differences, bins=50, alpha=0.7, color='purple', edgecolor='black')
        ax1.axvline(np.mean(differences), color='red', linestyle='--', linewidth=2, 
                   label=f'Moyenne: {np.mean(differences):.1f}')
        ax1.axvline(0, color='black', linestyle='-', linewidth=1, label='√âgalit√©')
        ax1.set_title('Distribution des Diff√©rences (Duo - Solo)', fontsize=14, fontweight='bold')
        ax1.set_xlabel('Diff√©rence de Distance', fontsize=12)
        ax1.set_ylabel('Nombre de Layouts', fontsize=12)
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # Graphique 2: Histogramme des ratios
        ax2.hist(ratios, bins=50, alpha=0.7, color='orange', edgecolor='black')
        ax2.axvline(np.mean(ratios), color='red', linestyle='--', linewidth=2, 
                   label=f'Moyenne: {np.mean(ratios):.2f}')
        ax2.axvline(1, color='black', linestyle='-', linewidth=1, label='Ratio = 1')
        ax2.set_title('Distribution des Ratios (Duo / Solo)', fontsize=14, fontweight='bold')
        ax2.set_xlabel('Ratio Distance Duo / Solo', fontsize=12)
        ax2.set_ylabel('Nombre de Layouts', fontsize=12)
        ax2.legend()
        ax2.grid(True, alpha=0.3)
        
        # Graphique 3: Scatter plot Solo vs Duo
        solo_distances = [data['solo_distance'] for data in comparison_data.values()]
        coop_distances = [data['coop_distance'] for data in comparison_data.values()]
        
        # Utiliser un √©chantillon pour la lisibilit√©
        sample_size = min(2000, len(solo_distances))
        indices = np.random.choice(len(solo_distances), sample_size, replace=False)
        
        solo_sample = [solo_distances[i] for i in indices]
        coop_sample = [coop_distances[i] for i in indices]
        
        ax3.scatter(solo_sample, coop_sample, alpha=0.6, s=20)
        
        # Ligne y=x pour montrer l'√©galit√©
        min_val = min(min(solo_sample), min(coop_sample))
        max_val = max(max(solo_sample), max(coop_sample))
        ax3.plot([min_val, max_val], [min_val, max_val], 'r--', linewidth=2, label='y=x (√©galit√©)')
        
        ax3.set_title(f'Scatter Plot: Solo vs Duo\n(√âchantillon de {sample_size} layouts)', 
                     fontsize=14, fontweight='bold')
        ax3.set_xlabel('Distance Solo', fontsize=12)
        ax3.set_ylabel('Distance Duo', fontsize=12)
        ax3.legend()
        ax3.grid(True, alpha=0.3)
        
        # Graphique 4: Histogramme des am√©liorations
        ax4.hist(improvements, bins=50, alpha=0.7, color='green', edgecolor='black')
        ax4.axvline(np.mean(improvements), color='red', linestyle='--', linewidth=2, 
                   label=f'Moyenne: {np.mean(improvements):.1f}')
        ax4.axvline(0, color='black', linestyle='-', linewidth=1, label='Pas d\'am√©lioration')
        ax4.set_title('Distribution des Am√©liorations (Solo - Duo)', fontsize=14, fontweight='bold')
        ax4.set_xlabel('Am√©lioration (distances √©conomis√©es)', fontsize=12)
        ax4.set_ylabel('Nombre de Layouts', fontsize=12)
        ax4.legend()
        ax4.grid(True, alpha=0.3)
        
        # Statistiques globales
        coop_better_count = sum(1 for diff in differences if diff < 0)
        solo_better_count = sum(1 for diff in differences if diff > 0)
        equal_count = sum(1 for diff in differences if abs(diff) < 1)
        
        stats_text = (f'Statistiques:\n'
                     f'Total layouts: {len(differences)}\n'
                     f'Duo meilleur: {coop_better_count} ({coop_better_count/len(differences)*100:.1f}%)\n'
                     f'Solo meilleur: {solo_better_count} ({solo_better_count/len(differences)*100:.1f}%)\n'
                     f'√âquivalent: {equal_count} ({equal_count/len(differences)*100:.1f}%)\n'
                     f'Am√©lioration moyenne: {np.mean(improvements):.1f}')
        
        fig.suptitle('Analyse Compl√®te des Diff√©rences Solo vs Duo', fontsize=16, fontweight='bold')
        
        # Ajouter les statistiques dans une zone libre
        fig.text(0.02, 0.02, stats_text, fontsize=11, 
                bbox=dict(boxstyle="round,pad=0.4", facecolor="lightblue", alpha=0.8))
        
        plt.tight_layout()
        
        # Sauvegarder
        output_path = f"{self.output_dir}/difference_analysis_comprehensive.png"
        plt.savefig(output_path, dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"   ‚úÖ Graphique des diff√©rences sauvegard√©: {output_path}")
        return output_path
    
    def select_high_difference_layouts(self, comparison_data: Dict[str, Dict], 
                                     selection_count: int = 50) -> List[Tuple[str, float, Dict]]:
        """S√©lectionne les layouts avec les plus grandes diff√©rences solo-duo"""
        
        # Cr√©er une liste avec les diff√©rences absolues (am√©lioration = solo - duo)
        layout_differences = []
        for layout_name, data in comparison_data.items():
            improvement = data['efficiency_gain']  # Solo - Duo (positif = duo meilleur)
            layout_differences.append((layout_name, improvement, data))
        
        # Trier par am√©lioration d√©croissante (plus grande am√©lioration en premier)
        layout_differences.sort(key=lambda x: x[1], reverse=True)
        
        # S√©lectionner les premiers
        selected_layouts = layout_differences[:selection_count]
        
        print(f"\nüéØ S√©lection des {len(selected_layouts)} layouts avec les plus grandes am√©liorations Solo‚ÜíDuo:")
        
        # Afficher les statistiques de s√©lection
        selected_improvements = [x[1] for x in selected_layouts]
        min_improvement = min(selected_improvements)
        max_improvement = max(selected_improvements)
        avg_improvement = statistics.mean(selected_improvements)
        
        print(f"   üìä Range des am√©liorations s√©lectionn√©es: {min_improvement:.1f} - {max_improvement:.1f} steps")
        print(f"   üìä Am√©lioration moyenne s√©lectionn√©e: {avg_improvement:.1f} steps")
        
        # Compter les types d'am√©liorations
        significant_improvement = sum(1 for _, improvement, _ in selected_layouts if improvement > 50)
        moderate_improvement = sum(1 for _, improvement, _ in selected_layouts if 20 <= improvement <= 50)
        
        print(f"   üìä Layouts avec am√©lioration > 50 steps: {significant_improvement}")
        print(f"   üìä Layouts avec am√©lioration 20-50 steps: {moderate_improvement}")
        
        return selected_layouts
    
    def create_selected_layouts_visualization(self, selected_layouts: List[Tuple[str, float, Dict]]) -> str:
        """Cr√©e une visualisation des layouts s√©lectionn√©s"""
        
        layout_names = []
        solo_distances = []
        duo_distances = []
        improvements = []
        
        # Garder l'ordre de s√©lection (meilleure am√©lioration en premier)
        for layout_name, improvement, data in selected_layouts:
            layout_names.append(layout_name[:20] + "..." if len(layout_name) > 20 else layout_name)
            solo_distances.append(data['solo_distance'])
            duo_distances.append(data['coop_distance'])
            improvements.append(improvement)
        
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(20, 16))
        
        # Graphique 1: Comparaison Solo vs Duo pour les layouts s√©lectionn√©s
        x = np.arange(len(layout_names))
        width = 0.35
        
        bars1 = ax1.bar(x - width/2, solo_distances, width, label='Solo', 
                       alpha=0.8, color='blue', edgecolor='navy')
        bars2 = ax1.bar(x + width/2, duo_distances, width, label='Duo', 
                       alpha=0.8, color='red', edgecolor='darkred')
        
        ax1.set_title(f'Layouts S√©lectionn√©s: Plus Grandes Am√©liorations Solo‚ÜíDuo\n'
                     f'Top {len(layout_names)} layouts avec les meilleures am√©liorations', 
                     fontsize=14, fontweight='bold')
        ax1.set_xlabel('Layout (tri√© par am√©lioration d√©croissante)', fontsize=12)
        ax1.set_ylabel('Distance Totale', fontsize=12)
        ax1.legend(fontsize=12)
        ax1.set_xticks(x)
        ax1.set_xticklabels(layout_names, rotation=45, ha='right')
        ax1.grid(True, alpha=0.3, axis='y')
        
        # Ajouter les valeurs d'am√©lioration sur le graphique
        for i, improvement in enumerate(improvements):
            ax1.text(i, max(solo_distances[i], duo_distances[i]) + 5, f'+{improvement:.0f}', 
                    ha='center', va='bottom', fontsize=8, fontweight='bold', color='green')
        
        # Graphique 2: Distribution des distances duo pour les layouts s√©lectionn√©s
        ax2.hist(duo_distances, bins=min(20, len(duo_distances)), alpha=0.7, color='red', 
                edgecolor='darkred', label=f'Distribution Distances Duo')
        
        # Ajouter des statistiques
        mean_duo = np.mean(duo_distances)
        median_duo = np.median(duo_distances)
        std_duo = np.std(duo_distances)
        mean_improvement = np.mean(improvements)
        
        ax2.axvline(mean_duo, color='blue', linestyle='--', linewidth=2, 
                   label=f'Moyenne: {mean_duo:.1f}')
        ax2.axvline(median_duo, color='green', linestyle='--', linewidth=2, 
                   label=f'M√©diane: {median_duo:.1f}')
        
        ax2.set_title(f'Distribution des Distances en Mode Duo - Layouts S√©lectionn√©s\n'
                     f'Am√©lioration moyenne: {mean_improvement:.1f} steps', 
                     fontsize=14, fontweight='bold')
        ax2.set_xlabel('Distance en Mode Duo', fontsize=12)
        ax2.set_ylabel('Nombre de Layouts', fontsize=12)
        ax2.legend(fontsize=12)
        ax2.grid(True, alpha=0.3)
        
        # Ajouter des statistiques textuelles
        stats_text = (f'Statistiques Layouts S√©lectionn√©s:\n'
                     f'Distances Duo - Min: {min(duo_distances):.0f}\n'
                     f'Distances Duo - Max: {max(duo_distances):.0f}\n'
                     f'√âcart-type: {std_duo:.1f}\n'
                     f'Am√©lioration min: {min(improvements):.0f}\n'
                     f'Am√©lioration max: {max(improvements):.0f}')
        
        ax2.text(0.98, 0.98, stats_text, transform=ax2.transAxes, 
                fontsize=10, verticalalignment='top', horizontalalignment='right',
                bbox=dict(boxstyle="round,pad=0.4", facecolor="lightyellow", alpha=0.8))
        
        plt.tight_layout()
        
        # Sauvegarder
        output_path = f"{self.output_dir}/selected_high_improvement_layouts.png"
        plt.savefig(output_path, dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"   ‚úÖ Visualisation des layouts s√©lectionn√©s sauvegard√©e: {output_path}")
        return output_path
    
    def create_duo_steps_distribution(self, selected_layouts: List[Tuple[str, float, Dict]]) -> str:
        """Cr√©e une analyse d√©taill√©e de la distribution des distances en duo"""
        
        # Extraire les donn√©es des layouts s√©lectionn√©s
        layout_names = []
        duo_distances = []
        solo_distances = []
        improvements = []
        
        for layout_name, improvement, data in selected_layouts:
            layout_names.append(layout_name)
            duo_distances.append(data['coop_distance'])
            solo_distances.append(data['solo_distance'])
            improvements.append(improvement)
        
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(20, 16))
        
        # Graphique 1: Histogramme des distances duo
        ax1.hist(duo_distances, bins=20, alpha=0.7, color='red', edgecolor='darkred')
        
        mean_duo = np.mean(duo_distances)
        median_duo = np.median(duo_distances)
        
        ax1.axvline(mean_duo, color='blue', linestyle='--', linewidth=2, 
                   label=f'Moyenne: {mean_duo:.1f}')
        ax1.axvline(median_duo, color='green', linestyle='--', linewidth=2, 
                   label=f'M√©diane: {median_duo:.1f}')
        
        ax1.set_title(f'Distribution des Distances en Mode Duo\n'
                     f'Layouts avec les meilleures am√©liorations ({len(selected_layouts)} layouts)', 
                     fontsize=12, fontweight='bold')
        ax1.set_xlabel('Distance Totale en Duo', fontsize=10)
        ax1.set_ylabel('Nombre de Layouts', fontsize=10)
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # Graphique 2: Scatter plot Am√©lioration vs Distance Duo
        colors = plt.cm.viridis([i/len(improvements) for i in range(len(improvements))])
        scatter = ax2.scatter(duo_distances, improvements, c=colors, alpha=0.7, s=50)
        
        ax2.set_title('Relation: Distance Duo vs Am√©lioration', fontsize=12, fontweight='bold')
        ax2.set_xlabel('Distance en Mode Duo', fontsize=10)
        ax2.set_ylabel('Am√©lioration (Solo - Duo)', fontsize=10)
        ax2.grid(True, alpha=0.3)
        
        # Ajouter une ligne de tendance
        z = np.polyfit(duo_distances, improvements, 1)
        p = np.poly1d(z)
        ax2.plot(duo_distances, p(duo_distances), "r--", alpha=0.8, 
                label=f'Tendance: y={z[0]:.2f}x+{z[1]:.1f}')
        ax2.legend()
        
        # Graphique 3: Box plot des distances par quartile d'am√©lioration
        # Diviser en quartiles selon l'am√©lioration
        sorted_by_improvement = sorted(zip(improvements, duo_distances), reverse=True)
        quartile_size = len(sorted_by_improvement) // 4
        
        quartiles_data = []
        quartile_labels = []
        
        for i in range(4):
            start = i * quartile_size
            end = start + quartile_size if i < 3 else len(sorted_by_improvement)
            quartile_distances = [item[1] for item in sorted_by_improvement[start:end]]
            quartiles_data.append(quartile_distances)
            quartile_labels.append(f'Q{i+1}\n(Top {start+1}-{end})')
        
        bp = ax3.boxplot(quartiles_data, labels=quartile_labels, patch_artist=True)
        
        # Colorer les box plots
        colors_box = ['gold', 'lightgreen', 'lightblue', 'lightcoral']
        for patch, color in zip(bp['boxes'], colors_box):
            patch.set_facecolor(color)
        
        ax3.set_title('Distribution des Distances Duo par Quartile d\'Am√©lioration', 
                     fontsize=12, fontweight='bold')
        ax3.set_ylabel('Distance en Mode Duo', fontsize=10)
        ax3.grid(True, alpha=0.3, axis='y')
        
        # Graphique 4: Top 10 des layouts avec annotation
        top_10 = selected_layouts[:10]
        top_names = [name[:15] + "..." if len(name) > 15 else name for name, _, _ in top_10]
        top_duo = [data['coop_distance'] for _, _, data in top_10]
        top_improvements = [improvement for _, improvement, _ in top_10]
        
        bars = ax4.bar(range(len(top_10)), top_duo, 
                      color=plt.cm.RdYlBu_r([imp/max(top_improvements) for imp in top_improvements]),
                      alpha=0.8, edgecolor='black')
        
        ax4.set_title('Top 10 des Layouts: Distances Duo avec Am√©liorations', 
                     fontsize=12, fontweight='bold')
        ax4.set_xlabel('Layouts (class√©s par am√©lioration)', fontsize=10)
        ax4.set_ylabel('Distance en Mode Duo', fontsize=10)
        ax4.set_xticks(range(len(top_10)))
        ax4.set_xticklabels(top_names, rotation=45, ha='right')
        ax4.grid(True, alpha=0.3, axis='y')
        
        # Ajouter les valeurs d'am√©lioration sur les barres
        for i, (bar, improvement) in enumerate(zip(bars, top_improvements)):
            height = bar.get_height()
            ax4.text(bar.get_x() + bar.get_width()/2., height + 2,
                    f'+{improvement:.0f}', ha='center', va='bottom', 
                    fontsize=9, fontweight='bold', color='darkgreen')
        
        plt.tight_layout()
        
        # Sauvegarder
        output_path = f"{self.output_dir}/duo_distances_detailed_analysis.png"
        plt.savefig(output_path, dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"   ‚úÖ Analyse d√©taill√©e des distances duo sauvegard√©e: {output_path}")
        return output_path
    
    def generate_comprehensive_report(self, comparison_data: Dict[str, Dict], 
                                    selected_layouts: List[Tuple[str, float, Dict]]) -> str:
        """G√©n√®re un rapport complet de l'analyse"""
        
        report_path = f"{self.output_dir}/shortest_path_analysis_report.txt"
        
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write("="*80 + "\n")
            f.write(f"RAPPORT D'ANALYSE DES DIFF√âRENCES DE DISTANCES SOLO VS DUO\n")
            f.write("="*80 + "\n\n")
            
            f.write(f"üìÖ Date d'analyse: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"ÔøΩ Source des donn√©es: path_evaluation_results\n")
            f.write(f"ÔøΩ Modes compar√©s: Solo vs Duo\n\n")
            
            # 1. Statistiques globales de comparaison
            f.write("üìä STATISTIQUES GLOBALES DE COMPARAISON\n")
            f.write("-" * 45 + "\n")
            f.write(f"Nombre total de layouts compar√©s: {len(comparison_data)}\n")
            
            # Calculer les statistiques globales
            all_solo = [data['solo_distance'] for data in comparison_data.values()]
            all_duo = [data['coop_distance'] for data in comparison_data.values()]
            all_improvements = [data['efficiency_gain'] for data in comparison_data.values()]
            
            duo_better_count = sum(1 for improvement in all_improvements if improvement > 0)
            solo_better_count = sum(1 for improvement in all_improvements if improvement < 0)
            equal_count = sum(1 for improvement in all_improvements if abs(improvement) < 1)
            
            f.write(f"Layouts o√π le duo est plus efficace: {duo_better_count} ({duo_better_count/len(comparison_data)*100:.1f}%)\n")
            f.write(f"Layouts o√π le solo est plus efficace: {solo_better_count} ({solo_better_count/len(comparison_data)*100:.1f}%)\n")
            f.write(f"Layouts avec performance √©quivalente: {equal_count} ({equal_count/len(comparison_data)*100:.1f}%)\n\n")
            
            f.write(f"Distance moyenne Solo: {np.mean(all_solo):.1f} steps\n")
            f.write(f"Distance moyenne Duo: {np.mean(all_duo):.1f} steps\n")
            f.write(f"Am√©lioration moyenne (Solo - Duo): {np.mean(all_improvements):.1f} steps\n")
            f.write(f"Pourcentage d'am√©lioration moyen: {(np.mean(all_improvements)/np.mean(all_solo))*100:.1f}%\n\n")
            
            # 2. Analyse des layouts s√©lectionn√©s
            f.write("üéØ ANALYSE DES LAYOUTS AVEC LES MEILLEURES AM√âLIORATIONS\n")
            f.write("-" * 55 + "\n")
            f.write(f"Nombre de layouts s√©lectionn√©s: {len(selected_layouts)}\n")
            f.write(f"Crit√®re de s√©lection: Meilleures am√©liorations Solo‚ÜíDuo\n\n")
            
            if selected_layouts:
                selected_improvements = [improvement for _, improvement, _ in selected_layouts]
                selected_duo = [data['coop_distance'] for _, _, data in selected_layouts]
                selected_solo = [data['solo_distance'] for _, _, data in selected_layouts]
                
                f.write(f"Range des am√©liorations s√©lectionn√©es: {min(selected_improvements):.1f} - {max(selected_improvements):.1f} steps\n")
                f.write(f"Am√©lioration moyenne s√©lectionn√©e: {np.mean(selected_improvements):.1f} steps\n")
                f.write(f"Distance solo moyenne s√©lectionn√©e: {np.mean(selected_solo):.1f} steps\n")
                f.write(f"Distance duo moyenne s√©lectionn√©e: {np.mean(selected_duo):.1f} steps\n")
                f.write(f"Pourcentage d'am√©lioration moyen: {(np.mean(selected_improvements)/np.mean(selected_solo))*100:.1f}%\n\n")
            
            # 3. Top 15 des layouts avec les meilleures am√©liorations
            f.write("ü•á TOP 15 DES LAYOUTS AVEC LES MEILLEURES AM√âLIORATIONS\n")
            f.write("-" * 55 + "\n")
            
            for i, (layout_name, improvement, data) in enumerate(selected_layouts[:15], 1):
                solo_dist = data['solo_distance']
                duo_dist = data['coop_distance']
                percentage = (improvement / solo_dist) * 100 if solo_dist > 0 else 0
                
                f.write(f"{i:2d}. {layout_name[:40]:<40}: "
                       f"Solo={solo_dist:4.0f}, Duo={duo_dist:4.0f}, "
                       f"Am√©lioration={improvement:4.0f} ({percentage:5.1f}%)\n")
            
            if len(selected_layouts) > 15:
                f.write(f"... et {len(selected_layouts) - 15} autres layouts\n")
            
            # 4. Cat√©gories d'am√©lioration
            f.write(f"\nüìà CAT√âGORIES D'AM√âLIORATION\n")
            f.write("-" * 30 + "\n")
            
            if selected_layouts:
                excellent = sum(1 for _, improvement, _ in selected_layouts if improvement > 100)
                very_good = sum(1 for _, improvement, _ in selected_layouts if 50 <= improvement <= 100)
                good = sum(1 for _, improvement, _ in selected_layouts if 20 <= improvement < 50)
                moderate = sum(1 for _, improvement, _ in selected_layouts if improvement < 20)
                
                f.write(f"Excellente am√©lioration (>100 steps): {excellent}\n")
                f.write(f"Tr√®s bonne am√©lioration (50-100 steps): {very_good}\n")
                f.write(f"Bonne am√©lioration (20-50 steps): {good}\n")
                f.write(f"Am√©lioration mod√©r√©e (<20 steps): {moderate}\n")
            
            f.write(f"\nüìä Fichiers de visualisation g√©n√©r√©s dans: {self.output_dir}\n")
        
        return report_path

class ShortestPathEvaluator:
    """√âvaluateur principal pour l'analyse des diff√©rences de paths"""
    
    def __init__(self, base_category: str = "symmetric"):
        """
        Initialise l'√©valuateur pour une cat√©gorie de base.
        
        Args:
            base_category: Cat√©gorie de base √† analyser
        """
        self.base_category = base_category
        self.analyzer = ShortestPathAnalyzer(base_category)
    
    def run_complete_analysis(self, selection_count: int = 50):
        """Lance l'analyse compl√®te des diff√©rences de distances"""
        
        print(f"üöÄ SHORTEST PATH ANALYSIS - ANALYSE COMPL√àTE DES DISTANCES SOLO VS DUO")
        print("=" * 70)
        
        # 1. D√©couvrir et charger les donn√©es
        print(f"\nüìÇ √âTAPE 1: Chargement des donn√©es depuis path_evaluation_results...")
        layout_data = self.analyzer.discover_layout_data()
        
        if not layout_data:
            print(f"‚ùå Aucune donn√©e trouv√©e dans {self.analyzer.data_dir}!")
            return
        
        # 2. Analyser les comparaisons
        print(f"\nüìä √âTAPE 2: Analyse comparative solo vs duo...")
        comparison_data = self.analyzer.analyze_layouts_comparison(layout_data)
        
        if not comparison_data:
            print(f"‚ùå Aucune donn√©e de comparaison disponible!")
            return
        
        # 3. Cr√©er le graphique de comparaison des distances
        print(f"\nüìà √âTAPE 3: Cr√©ation du graphique de comparaison des distances...")
        comparison_chart = self.analyzer.create_steps_comparison_chart(comparison_data)
        
        # 4. Cr√©er le graphique d'analyse des diff√©rences
        print(f"\nüìä √âTAPE 4: Cr√©ation de l'analyse compl√®te des diff√©rences...")
        difference_chart = self.analyzer.create_difference_analysis_chart(comparison_data)
        
        # 5. S√©lectionner les layouts avec les plus grandes am√©liorations
        print(f"\nüéØ √âTAPE 5: S√©lection des {selection_count} layouts avec les meilleures am√©liorations...")
        selected_layouts = self.analyzer.select_high_difference_layouts(comparison_data, selection_count)
        
        # 6. Cr√©er la visualisation des layouts s√©lectionn√©s
        print(f"\nüé® √âTAPE 6: Cr√©ation de la visualisation des layouts s√©lectionn√©s...")
        selection_viz = self.analyzer.create_selected_layouts_visualization(selected_layouts)
        
        # 7. Cr√©er l'analyse d√©taill√©e des distances duo
        print(f"\nüìä √âTAPE 7: Cr√©ation de l'analyse d√©taill√©e des distances duo...")
        duo_analysis = self.analyzer.create_duo_steps_distribution(selected_layouts)
        
        # 8. G√©n√©rer le rapport complet
        print(f"\nüìã √âTAPE 8: G√©n√©ration du rapport complet...")
        report_path = self.analyzer.generate_comprehensive_report(comparison_data, selected_layouts)
        print(f"   ‚úÖ Rapport sauvegard√©: {report_path}")
        
        # R√©sum√© final
        print(f"\nüéâ ANALYSE TERMIN√âE!")
        print("=" * 50)
        print(f"üìä {len(comparison_data)} layouts analys√©s")
        print(f"üéØ {len(selected_layouts)} layouts s√©lectionn√©s avec les meilleures am√©liorations")
        print(f"üìà Graphiques g√©n√©r√©s dans: {self.analyzer.output_dir}")
        
        # Statistiques finales
        all_improvements = [data['efficiency_gain'] for data in comparison_data.values()]
        duo_better = sum(1 for improvement in all_improvements if improvement > 0)
        solo_better = sum(1 for improvement in all_improvements if improvement < 0)
        avg_improvement = np.mean(all_improvements)
        
        print(f"üìä R√©sum√© global:")
        print(f"   - Layouts o√π duo est meilleur: {duo_better} ({duo_better/len(comparison_data)*100:.1f}%)")
        print(f"   - Layouts o√π solo est meilleur: {solo_better} ({solo_better/len(comparison_data)*100:.1f}%)")
        print(f"   - Am√©lioration moyenne: {avg_improvement:.1f} steps")
        print(f"   - Top am√©lioration: {max(all_improvements):.1f} steps")
    
    @staticmethod
    def analyze_all_data(selection_count: int = 50):
        """Analyse toutes les donn√©es disponibles"""
        
        print(f"üöÄ SHORTEST PATH ANALYSIS - ANALYSE GLOBALE")
        print("=" * 50)
        
        try:
            evaluator = ShortestPathEvaluator("all")
            evaluator.run_complete_analysis(selection_count)
            
            print(f"‚úÖ ANALYSE GLOBALE TERMIN√âE")
            
        except Exception as e:
            print(f"‚ùå ERREUR lors de l'analyse: {e}")
            return

def main():
    """Fonction principale"""
    import sys
    
    if len(sys.argv) > 1:
        selection_count = int(sys.argv[1]) if sys.argv[1].isdigit() else 50
        print(f"üí° S√©lection de {selection_count} layouts avec les meilleures am√©liorations")
    else:
        selection_count = 50
        print("üí° Usage: python shortest_path_evaluator.py [nombre_layouts_√†_s√©lectionner]")
        print(f"   Par d√©faut: s√©lection des {selection_count} meilleurs layouts")
    
    print("\nüéØ Analyse globale des donn√©es path_evaluation_results")
    ShortestPathEvaluator.analyze_all_data(selection_count)

if __name__ == "__main__":
    main()
