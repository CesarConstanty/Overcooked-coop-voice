#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de cr√©ation de la structure de dossiers professionnelle
pour le pipeline de g√©n√©ration de layouts Overcooked
"""

import os
from pathlib import Path
import json
import time
from datetime import datetime

def create_directory_structure():
    """Cr√©e la structure de dossiers compl√®te pour le pipeline."""
    
    base_dir = Path(__file__).parent.parent
    outputs_dir = base_dir / "outputs"
    
    print(f"üèóÔ∏è Cr√©ation de la structure de dossiers professionnelle")
    print(f"üìÅ Base: {base_dir}")
    print(f"üìÅ Outputs: {outputs_dir}")
    
    # Structure des dossiers
    structure = {
        "outputs": {
            "description": "Dossier principal des r√©sultats du pipeline",
            "subdirs": {
                "recipe_combinations": {
                    "description": "Combinaisons de recettes g√©n√©r√©es (√©tape 0)",
                    "subdirs": {}
                },
                "layouts_generes": {
                    "description": "Layouts g√©n√©r√©s bruts (√©tape 1)",
                    "subdirs": {
                        "grid_7x7": "Layouts 7x7",
                        "grid_8x8": "Layouts 8x8", 
                        "grid_9x9": "Layouts 9x9",
                        "canonical_forms": "Formes canoniques d√©duplicates"
                    }
                },
                "detailed_evaluation": {
                    "description": "√âvaluations d√©taill√©es des layouts (√©tape 2)",
                    "subdirs": {
                        "simulation_results": "R√©sultats de simulation d√©taill√©s",
                        "performance_metrics": "M√©triques de performance",
                        "trajectory_data": "Donn√©es de trajectoires",
                        "error_logs": "Logs d'erreurs de simulation"
                    }
                },
                "analysis_results": {
                    "description": "Analyses et insights (√©tape 3)",
                    "subdirs": {
                        "statistical_analysis": "Analyses statistiques",
                        "visualizations": "Graphiques et visualisations",
                        "insights_reports": "Rapports d'insights",
                        "performance_comparisons": "Comparaisons de performance"
                    }
                },
                "layouts_selectionnes": {
                    "description": "Layouts finaux s√©lectionn√©s (√©tape 4)",
                    "subdirs": {
                        "top_performers": "Meilleurs performers selon crit√®res",
                        "diverse_selection": "S√©lection diversifi√©e",
                        "specialized_layouts": "Layouts sp√©cialis√©s par type"
                    }
                },
                "trajectoires_layouts": {
                    "description": "Trajectoires d√©taill√©es des layouts s√©lectionn√©s",
                    "subdirs": {
                        "duo_trajectories": "Trajectoires en mode duo",
                        "solo_trajectories": "Trajectoires en mode solo", 
                        "comparison_data": "Donn√©es de comparaison",
                        "optimization_paths": "Chemins d'optimisation"
                    }
                },
                "selection_analysis": {
                    "description": "Analyses de la s√©lection finale",
                    "subdirs": {
                        "selection_plots": "Graphiques de s√©lection",
                        "criteria_analysis": "Analyse des crit√®res",
                        "reports": "Rapports de s√©lection",
                        "export_data": "Donn√©es d'export"
                    }
                },
                "logs": {
                    "description": "Logs du pipeline",
                    "subdirs": {
                        "step_logs": "Logs par √©tape",
                        "error_logs": "Logs d'erreurs",
                        "performance_logs": "Logs de performance",
                        "debug_logs": "Logs de debug"
                    }
                },
                "cache": {
                    "description": "Cache et donn√©es temporaires",
                    "subdirs": {
                        "layout_cache": "Cache des layouts",
                        "simulation_cache": "Cache des simulations",
                        "computation_cache": "Cache des calculs",
                        "temp_data": "Donn√©es temporaires"
                    }
                }
            }
        },
        "documentation": {
            "description": "Documentation du pipeline",
            "subdirs": {
                "user_guides": "Guides utilisateur",
                "technical_docs": "Documentation technique",
                "examples": "Exemples d'utilisation",
                "troubleshooting": "Guide de d√©pannage"
            }
        }
    }
    
    # Cr√©er les dossiers
    created_dirs = []
    
    def create_recursive(base_path, structure_dict):
        """Cr√©e r√©cursivement la structure de dossiers."""
        for dir_name, content in structure_dict.items():
            if dir_name == "description":
                continue
                
            dir_path = base_path / dir_name
            dir_path.mkdir(parents=True, exist_ok=True)
            created_dirs.append(dir_path)
            
            # Cr√©er README.md avec description
            if isinstance(content, dict):
                description = content.get("description", f"Dossier {dir_name}")
                readme_path = dir_path / "README.md"
                if not readme_path.exists():
                    readme_content = f"""# {dir_name.replace('_', ' ').title()}

{description}

Cr√©√© le: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## Structure

"""
                    # Ajouter sous-dossiers si pr√©sents
                    if "subdirs" in content:
                        for subdir, subdesc in content["subdirs"].items():
                            readme_content += f"- **{subdir}**: {subdesc}\n"
                    
                    readme_content += f"""

## Utilisation

Ce dossier fait partie du pipeline de g√©n√©ration de layouts Overcooked.
Consultez la documentation principale pour plus d'informations.

---
*G√©n√©r√© automatiquement par le pipeline*
"""
                    
                    with open(readme_path, 'w', encoding='utf-8') as f:
                        f.write(readme_content)
                
                # R√©cursion pour les sous-dossiers
                if "subdirs" in content:
                    create_recursive(dir_path, content["subdirs"])
    
    # Cr√©er la structure
    create_recursive(base_dir, structure)
    
    # Cr√©er fichier de structure globale
    structure_file = outputs_dir / "STRUCTURE.json"
    structure_info = {
        "created_at": time.time(),
        "created_date": datetime.now().isoformat(),
        "base_directory": str(base_dir),
        "total_directories": len(created_dirs),
        "directories": [str(d.relative_to(base_dir)) for d in created_dirs],
        "structure": structure
    }
    
    with open(structure_file, 'w', encoding='utf-8') as f:
        json.dump(structure_info, f, indent=2, ensure_ascii=False)
    
    # Cr√©er .gitkeep dans les dossiers vides
    for dir_path in created_dirs:
        if not any(dir_path.iterdir()):
            gitkeep = dir_path / ".gitkeep"
            gitkeep.touch()
    
    print(f"‚úÖ Structure cr√©√©e avec succ√®s:")
    print(f"  üìÅ {len(created_dirs)} dossiers cr√©√©s")
    print(f"  üìÑ Documentation automatique g√©n√©r√©e")
    print(f"  üìã Structure sauvegard√©e: {structure_file}")
    
    # Afficher l'arbre des dossiers principaux
    print(f"\nüå≥ Structure cr√©√©e:")
    for dir_path in sorted(created_dirs):
        if dir_path.parent == outputs_dir:
            level = "‚îú‚îÄ‚îÄ " if dir_path != sorted([d for d in created_dirs if d.parent == outputs_dir])[-1] else "‚îî‚îÄ‚îÄ "
            print(f"  {level}{dir_path.name}/")
            
            # Afficher les sous-dossiers principaux
            subdirs = [d for d in created_dirs if d.parent == dir_path]
            for i, subdir in enumerate(sorted(subdirs)):
                is_last = i == len(subdirs) - 1
                sublevel = "    ‚îî‚îÄ‚îÄ " if is_last else "    ‚îú‚îÄ‚îÄ "
                print(f"  {sublevel}{subdir.name}/")
    
    return structure_info

if __name__ == "__main__":
    create_directory_structure()
